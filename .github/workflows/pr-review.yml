name: PR Review Workflow

on:
  pull_request:
    branches: [ main, develop, develop-* ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  coverage:
    name: Check Code Coverage
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests with coverage
      run: mvn clean test jacoco:report
      
    - name: Check coverage threshold and generate report
      run: |
        # Generate coverage report
        mvn jacoco:report
        
        # Check if coverage report exists
        if [ ! -f "target/site/jacoco/jacoco.xml" ]; then
          echo "‚ùå Coverage report not found"
          exit 1
        fi
        
        # Extract coverage percentage from XML report
        COVERAGE_LINE=$(grep -o 'INSTRUCTION.*missed="[0-9]*".*covered="[0-9]*"' target/site/jacoco/jacoco.xml | head -1)
        
        if [ -n "$COVERAGE_LINE" ]; then
          MISSED=$(echo "$COVERAGE_LINE" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*')
          COVERED=$(echo "$COVERAGE_LINE" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*')
          
          # Set defaults if empty
          MISSED=${MISSED:-0}
          COVERED=${COVERED:-0}
          TOTAL=$((MISSED + COVERED))
          
          if [ "$TOTAL" -gt 0 ]; then
            PERCENTAGE=$((COVERED * 100 / TOTAL))
          else
            PERCENTAGE=0
          fi
        else
          echo "‚ö†Ô∏è  Could not parse coverage from XML, trying alternative method..."
          # Try to get coverage from index.html as fallback
          if [ -f "target/site/jacoco/index.html" ]; then
            PERCENTAGE=$(grep -o '[0-9]*%' target/site/jacoco/index.html | head -1 | grep -o '[0-9]*' || echo "0")
          else
            PERCENTAGE=0
          fi
        fi
        
        # Ensure PERCENTAGE is a number
        if ! [[ "$PERCENTAGE" =~ ^[0-9]+$ ]]; then
          echo "‚ö†Ô∏è  Could not determine coverage percentage, defaulting to 0%"
          PERCENTAGE=0
        fi
        
        echo "üìä Code Coverage: ${PERCENTAGE}%"
        
        if [ "$PERCENTAGE" -lt 80 ]; then
          echo "‚ùå Coverage ${PERCENTAGE}% is below the required 80%"
          exit 1
        else
          echo "‚úÖ Coverage ${PERCENTAGE}% meets the required 80%"
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: target/site/jacoco/
        
  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.coverage.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed! PR is ready for review."
        else
          echo "‚ùå Some checks failed. Please fix the issues before merging."
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "- Tests failed or were skipped"
          fi
          if [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "- Coverage check failed or was skipped"
          fi
          exit 1
        fi
